#include <SFML/Graphics.hpp>
#include <iostream>
#include <vector>

int main() {
    // Create window
    sf::RenderWindow window(sf::VideoMode(800, 600), "Data Structure & Algorithm Visualizer", sf::Style::Close);

    // Load font
    sf::Font font;
    if (!font.loadFromFile("arial.ttf")) {
        std::cerr << "Error loading font!" << std::endl;
        return -1;
    }

        // Load icon image
    sf::Image icon;
    if (!icon.loadFromFile("Assets/logo.png")) { // Replace "icon.png" with your image file path
        std::cerr << "Error loading icon!" << std::endl;
        return -1;
    }
    window.setIcon(icon.getSize().x, icon.getSize().y, icon.getPixelsPtr());




    // Create title text
    sf::Text titleText;
    titleText.setFont(font);
    titleText.setString("Data Structures & Algorithm Visualization");
    titleText.setCharacterSize(36);
    titleText.setFillColor(sf::Color::White);
    titleText.setStyle(sf::Text::Bold);
    titleText.setPosition(
        (800 - titleText.getLocalBounds().width) / 2,
        50
    );

    // Button labels
    std::vector<std::string> algorithms = {"Stacks", "Queues", "Trees", "Graphs", "Algorithms"};
    std::vector<sf::RectangleShape> buttons;
    std::vector<sf::Text> buttonTexts;

    // Create buttons and texts
    sf::Vector2f buttonSize(200, 50);
    float startY = 180;

    for (size_t i = 0; i < algorithms.size(); ++i) {
        sf::RectangleShape button(buttonSize);
        button.setPosition(315, startY + i * 70);
        button.setFillColor(sf::Color(100, 100, 200));
        button.setOutlineThickness(2);
        button.setOutlineColor(sf::Color::White);
        buttons.push_back(button);

        sf::Text buttonText;
        buttonText.setFont(font);
        buttonText.setString(algorithms[i]);
        buttonText.setCharacterSize(18);
        buttonText.setFillColor(sf::Color::White);
        buttonText.setPosition(
            button.getPosition().x + (buttonSize.x - buttonText.getLocalBounds().width) / 2,
            button.getPosition().y + (buttonSize.y - buttonText.getLocalBounds().height) / 2 - 5
        );
        buttonTexts.push_back(buttonText);
    }

    // Create Back button
    sf::RectangleShape backButton(sf::Vector2f(100, 40));
    backButton.setPosition(10, 10); // Position in the upper-left corner
    backButton.setFillColor(sf::Color(100, 100, 200));
    backButton.setOutlineThickness(2);
    backButton.setOutlineColor(sf::Color::White);

    sf::Text backButtonText;
    backButtonText.setFont(font);
    backButtonText.setString("Back");
    backButtonText.setCharacterSize(18);
    backButtonText.setFillColor(sf::Color::White);
    backButtonText.setPosition(
        backButton.getPosition().x + (backButton.getSize().x - backButtonText.getLocalBounds().width) / 2,
        backButton.getPosition().y + (backButton.getSize().y - backButtonText.getLocalBounds().height) / 2 - 5
    );

    // State variable to track which page to display
    bool showMainPage = true;

    // Main loop
    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();

            if (event.type == sf::Event::MouseButtonPressed) {
                if (event.mouseButton.button == sf::Mouse::Left) {
                    sf::Vector2f mousePos(event.mouseButton.x, event.mouseButton.y);

                    if (showMainPage) {
                        // Check if any main menu button is clicked
                        for (size_t i = 0; i < buttons.size(); ++i) {
                            if (buttons[i].getGlobalBounds().contains(mousePos)) {
                                std::cout << "Navigating to blank page for: " << algorithms[i] << std::endl;
                                showMainPage = false; // Switch to blank page
                            }
                        }
                    } else {
                        // Check if the Back button is clicked
                        if (backButton.getGlobalBounds().contains(mousePos)) {
                            std::cout << "Returning to main menu..." << std::endl;
                            showMainPage = true; // Return to main menu
                        }
                    }
                }
            }
        }

        // Render
        window.clear(sf::Color(50, 50, 50));

        if (showMainPage) {
            // Render main menu
            window.draw(titleText);
            for (size_t i = 0; i < buttons.size(); ++i) {
                window.draw(buttons[i]);
                window.draw(buttonTexts[i]);
            }
        } else {
            // Render blank page with Back button
            sf::Text blankPageText;
            blankPageText.setFont(font);
            blankPageText.setString("Blank Page");
            blankPageText.setCharacterSize(36);
            blankPageText.setFillColor(sf::Color::White);
            blankPageText.setPosition(
                (800 - blankPageText.getLocalBounds().width) / 2,
                (600 - blankPageText.getLocalBounds().height) / 2
            );
            window.draw(blankPageText);

            // Draw the Back button
            window.draw(backButton);
            window.draw(backButtonText);
        }

        window.display();
    }

    return 0;
}
